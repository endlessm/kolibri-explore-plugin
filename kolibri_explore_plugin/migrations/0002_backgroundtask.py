# -*- coding: utf-8 -*-
# Copyright 2023 Endless OS Foundation LLC
# SPDX-License-Identifier: GPL-2.0-or-later
# Generated by Django 1.11.29 on 2023-08-21 16:22
from __future__ import unicode_literals

import json
import logging

from django.db import migrations
from django.db import models

logger = logging.getLogger(__name__)


def populate_existing_jobs(apps, schema_editor):
    """Populate BackgroundTask entries from existing background jobs"""
    from kolibri.core.tasks.main import job_storage
    from kolibri_explore_plugin.jobs import BACKGROUND_QUEUE
    from kolibri_explore_plugin.jobs import TaskType

    BackgroundTask = apps.get_model("kolibri_explore_plugin", "BackgroundTask")

    # Assume any job in the background queue was created here and should
    # be added to the model.
    for job in job_storage.get_all_jobs(queue=BACKGROUND_QUEUE):
        # The job arguments are in a different format than the task
        # input parameters, so try our best to convert them.
        params = job.kwargs.copy()
        if job.func == TaskType.APPLYEXTERNALTAGS:
            if "node_id" not in params and len(job.args) > 0:
                params["node_id"] = job.args[0]
        elif job.func == TaskType.REMOTECHANNELIMPORT:
            if "channel_id" not in params and len(job.args) > 0:
                params["channel_id"] = job.args[0]
        elif job.func == TaskType.REMOTECONTENTIMPORT:
            if "channel_id" not in params and len(job.args) > 0:
                params["channel_id"] = job.args[0]

        task = BackgroundTask.objects.create(
            func=job.func,
            params=json.dumps(params, sort_keys=True),
            job_id=job.job_id,
            job_state=job.state,
        )
        logger.debug(
            f"Created BackgroundTask {task} from existing background "
            f"job {job.job_id}"
        )


class Migration(migrations.Migration):

    dependencies = [
        ("kolibri_explore_plugin", "0001_initial"),
    ]

    operations = [
        migrations.CreateModel(
            name="BackgroundTask",
            fields=[
                (
                    "id",
                    models.AutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "func",
                    models.CharField(
                        help_text="Fully qualified task function path",
                        max_length=64,
                    ),
                ),
                (
                    "params",
                    models.CharField(
                        help_text="JSON encoded task parameters",
                        max_length=512,
                    ),
                ),
                (
                    "job_id",
                    models.CharField(
                        blank=True,
                        default="",
                        help_text="Job identifier",
                        max_length=32,
                    ),
                ),
                (
                    "job_state",
                    models.CharField(
                        choices=[
                            ("CANCELED", "Canceled"),
                            ("CANCELING", "Canceling"),
                            ("COMPLETED", "Completed"),
                            ("FAILED", "Failed"),
                            ("PENDING", "Pending"),
                            ("QUEUED", "Queued"),
                            ("RUNNING", "Running"),
                            ("SCHEDULED", "Scheduled"),
                        ],
                        default="PENDING",
                        help_text="Job state",
                        max_length=16,
                    ),
                ),
            ],
        ),
        # Populate from existing jobs after the table is created. Do
        # nothing when reversing the migration.
        migrations.RunPython(
            populate_existing_jobs, migrations.RunPython.noop
        ),
    ]
